"redes_neuralnet" = sapply(MCs.red.neu, precision.global),
"regresion_logistica" = sapply(MCs.glm, precision.global)
)
library(tidyverse)
library(glue)
library(scales)
library(traineR)
resumen.lineas <- function(resultados, titulo) {
datos.grafico <- pivot_longer(
resultados,
cols = -rep,
names_to = 'name',
values_to = 'value'
)
ggplot(datos.grafico, aes(y = value, x = rep, color = name)) +
geom_line(size = 1) +
geom_point() +
scale_y_continuous(labels = label_number()) +
scale_x_continuous(breaks = seq.int(1,max(datos.grafico$rep),1)) +
theme_minimal(base_size = 16) +
labs(color = '',
x = 'repetición',
title = titulo,
y = paste('', titulo)) +
theme(axis.text.y = element_text(vjust = 0),
legend.position = "top",
plot.title = element_text(hjust = 0.5))
}
precision.global <- function(x){
sum(diag(x)) / sum(x)
}
resultado.si <- data.frame(
"rep" = 1:cantidad.validacion.cruzada,
"svm" = sapply(MCs.svm, precision.global),
"k_vecinos" = sapply(MCs.knn, precision.global),
"bayes" = sapply(MCs.bayes, precision.global),
"arboles" = sapply(MCs.arbol, precision.global),
"bosques" = sapply(MCs.bosque, precision.global),
"potenciacion" = sapply(MCs.potenciacion,precision.global),
"redes_nnet" = sapply(MCs.red, precision.global),
"xgboost" = sapply(MCs.xgboost, precision.global),
"redes_neuralnet" = sapply(MCs.red.neu, precision.global),
"regresion_logistica" = sapply(MCs.glm, precision.global)
)
resumen.lineas(resultado.si, "Precisión Global")
resultado.global <- data.frame(
"rep" = 1:cantidad.validacion.cruzada,
"svm" = (1 - sapply(MCs.svm, precision.global))*100,
"k_vecinos" = (1 - sapply(MCs.knn, precision.global))*100,
"bayes" = (1 - sapply(MCs.bayes, precision.global))*100,
"arboles" = (1 - sapply(MCs.arbol, precision.global))*100,
"bosques" = (1 - sapply(MCs.bosque, precision.global))*100,
"potenciacion" = (1- sapply(MCs.potenciacion,precision.global))*100,
"redes_nnet" = (1 - sapply(MCs.red, precision.global))*100,
"xgboost" = (1 - sapply(MCs.xgboost, precision.global))*100,
"redes_neuralnet" = (1- sapply(MCs.red.neu, precision.global))*100,
"regresion_logistica" = (1-  sapply(MCs.glm, precision.global))*100
)
resumen.lineas(resultado.global, "Error Global")
install.packages("formatR")
datos <- read.table("../datos/covid19_CR.csv", sep = ";", dec = ".", header = T)
str(datos)
library(lubridate)
library(dplyr)
datos <- datos%>%
mutate(FECHA = as.POSIXct(FECHA, format = "%Y-%m-%d"))
fecha.inicio <- datos[1,1]
fecha.final <- datos[nrow(datos),1]
serie <- ts(datos$casos_nuevos, frequency = 7, start =c(1,wday(fecha.inicio)))
serie
datos <- read.table("../datos/covid19_CR.csv", sep = ";", dec = ".", header = T)
str(datos)
datos <- read.table("../datos/covid19_CR.csv", sep = ";", dec = ".", header = T)
str(datos)
datos <- read.table("../datos/covid19_CR.csv", sep = ";", dec = ".", header = T)
str(datos)
datos <- read.table("../datos/covid19_CR.csv", sep = ";", dec = ".", header = T)
str(datos)
datos <- read.table("../datos/covid19_CR.csv", sep = ";", dec = ".", header = T)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
Sys.setlocale(locale = "es_ES.UTF-8")
datos <- read.table("../datos/covid19_CR.csv", sep = ";", dec = ".", header = T)
str(datos)
datos <- read.table("../datos/covid19_CR.csv", sep = ";", dec = ".", header = T)
datos <- read.table("../datos/covid19_CR.csv", sep = ";", dec = ".", header = T)
str(datos)
datos <- read.table("../datos/covid19_CR.csv", sep = ";", dec = ".", header = T)
str(datos)
datos <- read.table("../datos/covid19_CR.csv", sep = ";", dec = ".", header = T)
str(datos)
setwd("~/Documents/Github/Modelos-Lineales")
datos <- read.table("../datos/covid19_CR.csv", sep = ";", dec = ".", header = T)
str(datos)
setwd("~/Documents/Github/Modelos-Lineales/Tarea9")
datos <- read.table("../datos/covid19_CR.csv", sep = ";", dec = ".", header = T)
str(datos)
library(lubridate)
library(dplyr)
datos <- datos%>%
mutate(FECHA = as.POSIXct(FECHA, format = "%Y-%m-%d"))
fecha.inicio <- datos[1,1]
fecha.final <- datos[nrow(datos),1]
serie <- ts(datos$casos_nuevos, frequency = 7, start =c(1,wday(fecha.inicio)))
serie
library(lubridate)
library(dplyr)
datos <- datos%>%
mutate(FECHA = as.POSIXct(FECHA, format = "%Y-%m-%d"))
fecha.inicio <- datos[1,1]
fecha.final <- datos[nrow(datos),1]
serie <- ts(datos$casos_nuevos, frequency = 7, start =c(1,wday(fecha.inicio)))
serie
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
Sys.setlocale(locale = "es_ES.UTF-8")
library(lubridate)
library(dplyr)
datos <- datos%>%
mutate(FECHA = as.POSIXct(FECHA, format = "%Y-%m-%d"))
fecha.inicio <- datos[1,1]
fecha.final <- datos[nrow(datos),1]
serie <- ts(datos$casos_nuevos, frequency = 7, start =c(1,wday(fecha.inicio)))
serie
library(xts)
library(dplyr)
library(ggplot2)
library(forecast)
library(dygraphs)
library(lubridate)
train.ts <- head(serie, -23)
test.ts <- tail(serie, 23)
modelo.HW <- hw(train.ts,h = 23)
modelo.HW
pred.HW <- forecast(modelo.HW, h = 23)
pred.HW
calibrar.HW <- function(entrenamiento, prueba, paso = 0.1) {
# se calculan todas las combinaciones para los parametros
params <- purrr::cross(list(a = seq(0, 1, by = paso), b = seq(0, 1, by = paso), g = seq(0, 1, by = paso)))
# se calcula un modelos para cada combinacion de parametros
hw_secure <- purrr::possibly(forecast::hw, otherwise = NULL)
models <- invisible(purrr::map(params, ~suppressWarnings(hw_secure(
entrenamiento, alpha = ifelse(.$a == 0, F, .$a), beta = ifelse(.$b == 0, F, .$b),
gamma = ifelse(.$g == 0, F, .$g), h = length(prueba)))))
# se realiza la prediccion con cada uno de los modelos
predictions <- purrr::map(models, ~{
if (is.null(.)) {
return(NULL)
}
forecast(., h = length(prueba))
})
# se calcula el error para cada prediccion
error <- purrr::map_dbl(predictions, ~{
if (is.null(.)) {
return(Inf)
}
sum((as.numeric(prueba) - as.numeric(.$mean))^2)
})
# se retorna el modelo con el menor error
best_model <- models[[which.min(error)]]
p <- params[[which.min(error)]]
best_model$call <- call("HoltWinters", y = quote(datos),
alpha = ifelse(p$a == 0, F, p$a),
beta = ifelse(p$b == 0, F, p$b),
gamma = ifelse(p$g == 0, F, p$g))
return(best_model$call)
}
calibrar.HW(train.ts, test.ts)
cajero <- read.csv("../datos/Cajero.csv", header = T, dec = ".", sep = ";")
fechas <- seq(as.Date("1998-01-01"), as.Date("2012-07-30"), "day")
cajero$fechas <- fechas
# Eliminamos días bisiestos
cajero <- cajero[!(month(cajero$fechas) == 2 & day(cajero$fechas) == 29), ]
# verificamos si hay valores con NA
cajero$monto[is.na(cajero$monto)]
#14 de agosto
cajero.ragla.14 <- cajero[cajero$fechas < ymd("2011-08-14"), ]
tail(cajero.ragla.14)
serie.regla.14 <- ts(cajero.ragla.14$monto, start = 1998, frequency = 365)
head(serie.regla.14)
modelo.14 <- HoltWinters(serie.regla.14)
prediccion.14.agosto <- forecast(modelo.14, h = 1)
prediccion.14.agosto$mean[1]
real.14.agosto <- cajero[cajero$fechas == ymd("2011-08-14"), "monto"]
real.14.agosto
error <- as.numeric(prediccion.14.agosto$mean[1] - real.14.agosto)
error
if (error < 0) {
factor.ajuste <- as.numeric(1 + (abs(error)/prediccion.14.agosto$mean[1]))
} else {
factor.ajuste <- as.numeric(1 - (abs(error)/prediccion.14.agosto$mean[1]))
}
factor.ajuste
prediccion.14.agosto$mean[1] * factor.ajuste
real.14.agosto
serie <- ts(cajero$monto, start = 1998, frequency = 365)
serie
modelo <- HoltWinters(serie)
pred <- forecast(modelo, h = 30)
pred$mean[15]
pred$mean[15] <- pred$mean[15] * factor.ajuste
pred$mean[15]
if (pred$mean[15] > max(serie)) {
pred$mean[15] <- max(serie)
}
if (pred$mean[15] < min(serie)) {
pred$mean[15] <- min(serie)
}
serie.pred <- ts.union(serie, Predicción = pred$mean)
fecha.fin <- cajero$fechas[nrow(cajero)]
# Generamos las fechas de la predicción.
fechas <- fecha.fin + days(1:30)
# Unimos con las fechas de la serie original
total.fechas <- c(cajero$fechas, fechas)
serie.pred <- xts(xts(serie.pred, order.by = total.fechas))
dygraph(serie.pred, "Pronóstico de cantidad de dinero del cajero", width = "100%") %>%
dyAnnotation("2012-08-14", text = "14") %>% # Denotamos el valor de la regla con R
dyOptions(drawPoints = TRUE, pointSize = 2) %>%
dyRangeSelector(height = 20, strokeColor = "") %>%
dyRangeSelector(fillColor = "black", strokeColor = "orange" )
#15 de agosto
cajero.ragla.15 <- cajero[cajero$fechas < ymd("2011-08-15"), ]
tail(cajero.ragla.15)
serie.regla.15 <- ts(cajero.ragla.15$monto, start = 1998, frequency = 365)
head(serie.regla.15)
modelo.15 <- HoltWinters(serie.regla.15)
prediccion.15.agosto <- forecast(modelo.15, h = 1)
prediccion.15.agosto$mean[1]
real.15.agosto <- cajero[cajero$fechas == ymd("2011-08-15"), "monto"]
real.15.agosto
error <- as.numeric(prediccion.15.agosto$mean[1] - real.15.agosto)
error
if (error < 0) {
factor.ajuste <- as.numeric(1 + (abs(error)/prediccion.15.agosto$mean[1]))
} else {
factor.ajuste <- as.numeric(1 - (abs(error)/prediccion.15.agosto$mean[1]))
}
factor.ajuste
prediccion.15.agosto$mean[1] * factor.ajuste
real.15.agosto
serie <- ts(cajero$monto, start = 1998, frequency = 365)
serie
modelo <- HoltWinters(serie)
pred <- forecast(modelo, h = 30)
pred$mean[16]
pred$mean[16] <- pred$mean[16] * factor.ajuste
pred$mean[16]
if (pred$mean[16] > max(serie)) {
pred$mean[16] <- max(serie)
}
if (pred$mean[16] < min(serie)) {
pred$mean[16] <- min(serie)
}
serie.pred <- ts.union(serie, Predicción = pred$mean)
fecha.fin <- cajero$fechas[nrow(cajero)]
# Generamos las fechas de la predicción.
fechas <- fecha.fin + days(1:30)
# Unimos con las fechas de la serie original
total.fechas <- c(cajero$fechas, fechas)
serie.pred <- xts(xts(serie.pred, order.by = total.fechas))
dygraph(serie.pred, "Pronóstico de cantidad de dinero del cajero", width = "100%") %>%
dyAnnotation("2012-08-15", text = "15") %>% # Denotamos el valor de la regla con R
dyOptions(drawPoints = TRUE, pointSize = 2) %>%
dyRangeSelector(height = 20, strokeColor = "") %>%
dyRangeSelector(fillColor = "black", strokeColor = "orange" )
#16 de agosto
cajero.ragla.16 <- cajero[cajero$fechas < ymd("2011-08-16"), ]
tail(cajero.ragla.16)
serie.regla.16 <- ts(cajero.ragla.16$monto, start = 1998, frequency = 365)
head(serie.regla.16)
modelo.16 <- HoltWinters(serie.regla.16)
prediccion.16.agosto <- forecast(modelo.16, h = 1)
prediccion.16.agosto$mean[1]
real.16.agosto <- cajero[cajero$fechas == ymd("2011-08-16"), "monto"]
real.16.agosto
error <- as.numeric(prediccion.16.agosto$mean[1] - real.16.agosto)
error
if (error < 0) {
factor.ajuste <- as.numeric(1 + (abs(error)/prediccion.16.agosto$mean[1]))
} else {
factor.ajuste <- as.numeric(1 - (abs(error)/prediccion.16.agosto$mean[1]))
}
factor.ajuste
prediccion.16.agosto$mean[1] * factor.ajuste
real.16.agosto
serie <- ts(cajero$monto, start = 1998, frequency = 365)
serie
modelo <- HoltWinters(serie)
pred <- forecast(modelo, h = 30)
pred$mean[17]
pred$mean[17] <- pred$mean[17] * factor.ajuste
pred$mean[17]
if (pred$mean[17] > max(serie)) {
pred$mean[17] <- max(serie)
}
if (pred$mean[17] < min(serie)) {
pred$mean[17] <- min(serie)
}
serie.pred <- ts.union(serie, Predicción = pred$mean)
fecha.fin <- cajero$fechas[nrow(cajero)]
# Generamos las fechas de la predicción.
fechas <- fecha.fin + days(1:30)
# Unimos con las fechas de la serie original
total.fechas <- c(cajero$fechas, fechas)
serie.pred <- xts(xts(serie.pred, order.by = total.fechas))
dygraph(serie.pred, "Pronóstico de cantidad de dinero del cajero", width = "100%") %>%
dyAnnotation("2012-08-16", text = "16") %>% # Denotamos el valor de la regla con R
dyOptions(drawPoints = TRUE, pointSize = 2) %>%
dyRangeSelector(height = 20, strokeColor = "") %>%
dyRangeSelector(fillColor = "black", strokeColor = "orange" )
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
Sys.setlocale(locale = "es_ES.UTF-8")
library(fpp2)
serie.hsales <- hsales
library(fpp2)
serie.hsales <- hsales
library(xts)
library(dplyr)
library(ggplot2)
library(forecast)
library(dygraphs)
library(lubridate)
dygraph(serie.hsales, width = "100%") %>%
dyRangeSelector()
log.dif.hsales <- diff(log(serie.hsales))
autoplot(log.dif.hsales, main =
"Diferencia del logaritmo de las ventas mensuales de casas") +
labs(subtitle = "Estados Unidos: 1973-1995.") +
xlab("Año") + ylab("Diferencia")+
theme_minimal()
# Calculamos el espectro y la frecuencia con la función spec.pgram.
res <- spec.pgram(serie.hsales, log = "no", plot = F)
# Ordenamos el espectro con respecto a la frecuencia en orden decreciente
max <- order(res$spec, res$freq, decreasing = TRUE)
# Tomamos las primeras 3 posiciones. El valor 1 no se toma en cuenta pues es toda la serie.
max <- max[max != 1][1:3]
# Tomamos de las frecuencias las posiciones obtenidas.
max <- res$freq[max]
# Finalmente obtenemos los periodos más importantes, se usa 12 en el numerador porque la frecuencia es 12.
periodos <- 12/max
periodos
dygraph(res, 'Peridiograma', 'Frecuencia', 'Espectro', width = "100%") %>%
dyEvent(max[1], color = "green") %>%
dyEvent(max[2], color = "red") %>%
dyEvent(max[3], color = "navy") %>%
dyRangeSelector() %>% dyOptions(drawPoints = TRUE, pointSize = 2)
acf(serie.hsales)
pacf(serie.hsales)
train <- head(serie.hsales, -12)
test <- tail(serie.hsales, 12)
modelo <- arima(serie.hsales, order = c(0, 1, 1), seasonal = list(order = c(2, 1, 2),
period = 12))
pred <- predict(modelo, n.ahead = 12)
pred
modelo.HW <- hw(train,h = 12)
pred.HW <- forecast(modelo.HW, h = 12)
calibrar.HW <- function(entrenamiento, prueba, paso = 0.1) {
# se calculan todas las combinaciones para los parametros
params <- purrr::cross(list(a = seq(0, 1, by = paso), b = seq(0, 1, by = paso), g = seq(0, 1, by = paso)))
# se calcula un modelos para cada combinacion de parametros
hw_secure <- purrr::possibly(forecast::hw, otherwise = NULL)
models <- invisible(purrr::map(params, ~suppressWarnings(hw_secure(
entrenamiento, alpha = ifelse(.$a == 0, F, .$a), beta = ifelse(.$b == 0, F, .$b),
gamma = ifelse(.$g == 0, F, .$g), h = length(prueba)))))
# se realiza la prediccion con cada uno de los modelos
predictions <- purrr::map(models, ~{
if (is.null(.)) {
return(NULL)
}
forecast(., h = length(prueba))
})
# se calcula el error para cada prediccion
error <- purrr::map_dbl(predictions, ~{
if (is.null(.)) {
return(Inf)
}
sum((as.numeric(prueba) - as.numeric(.$mean))^2)
})
# se retorna el modelo con el menor error
best_model <- models[[which.min(error)]]
p <- params[[which.min(error)]]
best_model$call <- call("HoltWinters", y = quote(datos),
alpha = ifelse(p$a == 0, F, p$a),
beta = ifelse(p$b == 0, F, p$b),
gamma = ifelse(p$g == 0, F, p$g))
return(best_model$call)
}
calibrar.HW(train, test)
modelo.calibrado <- hw(train, alpha = 0.4, beta = 0.1, gamma = 0.3, h = 12)
pred.calibrado <- forecast(modelo.calibrado, h = 12)
modelo.RN <- nnetar(train, size = 40)
pred.RN <- forecast(modelo.RN, h = 12)
auto.arima(train)
modelo.arima <- arima(train, order = c(1, 0, 0), seasonal = list(order = c(1,
1, 0), period = 12))
pred.arima <- predict(modelo.arima, n.ahead = 12)
calibrar.arima <- function(entrenamiento = NULL, prueba = NULL, periodo = NA_integer_,
ar = 0:2, es = 0:1) {
# se calculan todas las combinaciones para los parametros
params <- purrr::cross(list(a = ar, b = ar, c = ar, d = es, e = es, f = es))
# se calcula un modelos para cada combinacion de parametros
arima_secure <- purrr::possibly(stats::arima, otherwise = NULL)
models <- purrr::map(params, ~suppressWarnings(arima_secure(entrenamiento, order = c(.$a,
.$b, .$c), seasonal = list(order = c(.$d, .$e, .$f), period = periodo))))
# se realiza la prediccion con cada uno de los modelos
predictions <- purrr::map(models, ~{
if (is.null(.)) {
return(NULL)
}
forecast(., h = length(prueba))
})
# se calcula el error para cada prediccion
error <- purrr::map_dbl(predictions, ~{
if (is.null(.)) {
return(Inf)
}
sum((as.numeric(prueba) - as.numeric(.$mean))^2)
})
# se retorna el modelo con el menor error
best_model <- models[[which.min(error)]]
p <- params[[which.min(error)]]
best_model$call <- call("arima", x = quote(datos), order = as.numeric(c(p$a,
p$b, p$c)), seasonal = list(order = as.numeric(c(p$d, p$e, p$f)), period = periodo))
return(best_model)
}
calibrar.arima(train, test, periodo = 12, 0:3, 0:1)
modelo.arima.calibrado <- arima(train, order = c(1, 2, 3), seasonal = list(order = c(0,
1, 1), period = 12))
pred.arima.calibrado <- predict(modelo.arima.calibrado, n.ahead = 12)
RSS <- function(Pred, Real) {
return(sum((Real - Pred)^2))
}
MSE <- function(Pred, Real) {
N <- length(Real)
rss <- sum((Real - Pred)^2)
return((1/N) * rss)
}
RMSE <- function(Pred, Real) {
N <- length(Real)
rss <- sum((Real - Pred)^2)
return(sqrt((1/N) * rss))
}
RE <- function(Pred, Real) {
res <- sum(abs(Real - Pred))/sum(abs(Real))
return(res)
}
tabla.errores <- function(predicciones, real, nombres = NULL) {
r <- data.frame()
for (pred in predicciones) {
r <- rbind(r, data.frame(MSE = MSE(pred, real), RMSE = RMSE(pred, real),
RE = RE(pred, real), CORR = cor(pred, real)))
}
row.names(r) <- nombres
return(r)
}
grafico.errores <- function(errores) {
library(ggplot2)
library(reshape)
centros <- as.data.frame(apply(errores, 2, function(i) scales::rescale(i, to = c(0,
100))))
res <- melt(t(centros), varnames = c("E", "Modelos"))
res <- res[order(res$E, decreasing = F), ]
res$M <- as.character(res$M)
y = c(0, 25, 50, 75, 100)
ggplot(res, aes(x = E, y = value, group = Modelos, color = Modelos, fill = Modelos)) +
geom_polygon(alpha = 0.3, size = 1) + geom_point(size = 3) + theme_minimal() +
theme(axis.text.y = element_blank()) + xlab("") + ylab("") + scale_y_continuous(limits = c(-10,
100), breaks = y) + annotate("text", x = 0.5, y = y, label = paste0(y, "%"),
color = "gray60") + ggproto("CordRadar", CoordPolar, theta = "x", r = "y",
start = 0, direction = sign(1))
}
errores <- tabla.errores(predicciones = list(pred.arima$pred, pred.arima.calibrado$pred,
pred.HW$mean, pred.calibrado$mean, pred.RN$mean), real = test)
row.names(errores) <- c("AUTO.ARIMA", "ARIMA FUERZA BRUTA", "HOLT-WINTERS", "HW FUERZA BRUTA", "REDES")
errores
grafico.errores(errores)
predicciones <- ts.union(train, original = test, AUTO.ARIMA = pred.arima$pred,
`arima Fuerza Bruta` = pred.arima.calibrado$pred, `Holt-Winters` = pred.HW$mean, `HW Fuerza Bruta` = pred.calibrado$mean ,
`Redes Neuronales` = pred.RN$mean)
dygraph(predicciones, width = "100%") %>%
dyRangeSelector()
