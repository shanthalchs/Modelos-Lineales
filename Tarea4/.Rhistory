install.packages("rattle")
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
datos <- read.table("datos/DeudaCredito.csv", dec = ".", sep = ",", header = T, stringsAsFactors = T )[,-1]
str(datos)
numero.predictoras <- dim(datos)[2] - 1
filas <- dim(datos)[1]
muestra <- sample(1:filas, floor(filas*0.20))
ttesting <- datos[muestra,]
taprendizaje <- datos[-muestra,]
library(neuralnet)
library(traineR)
# 2 capas
modelo.nnet2 <- neuralnet(formula, data = taprendizaje, hidden = c( 4, 3), linear.output = TRUE, threshold = 0.05, stepmax = 1e+05)
formula <- as.formula(paste("lpsa ~", paste(nombres[!nombres %in% c("lpsa")], collapse = " + ")))
# Generamos la fórmula
nombres <- colnames(datos.aprendizaje)
formula <- as.formula(paste("lpsa ~", paste(nombres[!nombres %in% c("lpsa")], collapse = " + ")))
View(datos)
# 2 capas
modelo.nnet2 <- neuralnet(Balance ~., data = taprendizaje, hidden = c( 4, 3), linear.output = TRUE, threshold = 0.05, stepmax = 1e+05)
str(taprendizaje)
datos <- dummy_cols(datos, select_columns = c(7:10),remove_selected_columns = T)
library(dummies)
datos <- read.table("datos/DeudaCredito.csv", dec = ".", sep = ",", header = T, stringsAsFactors = T )[,-1]
datos <- dummy_cols(datos, select_columns = c(7:10),remove_selected_columns = T)
library(fastDummies)
datos <- read.table("datos/DeudaCredito.csv", dec = ".", sep = ",", header = T, stringsAsFactors = T )[,-1]
datos <- dummy_cols(datos, select_columns = c(7:10),remove_selected_columns = T)
datos
datos <- dummy_cols(datos, select_columns = c("Genero","Estudiante","Casado","Etnicidad"),remove_selected_columns = T)
str(datos)
library(fastDummies)
datos <- read.table("datos/DeudaCredito.csv", dec = ".", sep = ",", header = T, stringsAsFactors = T )[,-1]
datos <- dummy_cols(datos, select_columns = c("Genero","Estudiante","Casado","Etnicidad"),remove_selected_columns = T)
str(datos)
numero.predictoras <- dim(datos)[2] - 1
filas <- dim(datos)[1]
muestra <- sample(1:filas, floor(filas*0.20))
ttesting <- datos[muestra,]
taprendizaje <- datos[-muestra,]
library(traineR)
modelo.linear <- train.svm(Balance~., data = taprendizaje, kernel = "linear")
prediccion.linear <- predict(modelo.linear, ttesting)
linear <- indices.precision(ttesting$Balance ,prediccion.linear$prediction,numero.predictoras)
# 2 capas
modelo.nnet2 <- neuralnet(Balance ~., data = taprendizaje, hidden = c( 4, 3), linear.output = TRUE, threshold = 0.05, stepmax = 1e+05)
prediccion.nnet2 <- predict(modelo.nnet2,ttesting)
MC.nnet2 <- confusion.matrix(ttesting, prediccion.nnet2)
# Residual Sum of Square (RSS)
RSS <- function(Pred,Real) {
ss <- sum((Real-Pred)^2)
return(ss)
}
RSE<-function(Pred,Real,NumPred) {
N<-length(Real)-NumPred-1  # <- length(Real)-(NumPred+1)
ss<-sqrt((1/N)*RSS(Pred,Real))
return(ss)
}
MSE <- function(Pred,Real) {
N<-length(Real)
ss<-(1/N)*RSS(Pred,Real)
return(ss)
}
error.relativo <- function(Pred,Real) {
ss<-sum(abs(Real-Pred))/sum(abs(Real))
return(ss)
}
# Funciones para desplegar precisión
indices.precision <- function(real, prediccion,cantidad.variables.predictoras) {
return(list(error.cuadratico = MSE(prediccion,real),
raiz.error.cuadratico = RSE(prediccion,real,cantidad.variables.predictoras),
error.relativo = error.relativo(prediccion,real),
correlacion = as.numeric(cor(prediccion,real))))
}
# Gráfico de dispersión entre el valor real de la variable a predecir y la predicción del modelo.
plot.real.prediccion <- function(real, prediccion, modelo = "") {
g <- ggplot(data = data.frame(Real = real, Prediccion = as.numeric(prediccion)), mapping = aes(x = Real, y = Prediccion)) +
geom_point(size = 1, col = "dodgerblue3") +
labs(title = paste0("Real vs Predicción", ifelse(modelo == "", "", paste(", con", modelo))),
x = "Real",
y = "Predicción")
return(g)
}
indices1 <- indices.general(MC.nnet2)
indices1 <- indices.precision(MC.nnet2)
indices1 <- indices.precision(prediccion.nnet2)
indices1 <- indices.precision(ttesting$Balance ,prediccion.nnet2$prediction,numero.predictoras)
prediccion.nnet2
indices1 <- indices.precision(ttesting$Balance ,prediccion.nnet2[,1],numero.predictoras)
indices1
# 2 capas
modelo.nnet2 <- neuralnet(Balance ~., data = taprendizaje, hidden = c( 4, 3), linear.output = TRUE, threshold = 0.05, stepmax = 1e+05)
prediccion.nnet2 <- predict(modelo.nnet2,ttesting)
prediccion.nnet2
indices1 <- indices.precision(ttesting$Balance ,prediccion.nnet2[,1],numero.predictoras)
indices1
prediccion.nnet2
# 2 capas
modelo.nnet2 <- neuralnet(Balance ~., data = taprendizaje, hidden = c( 4, 3), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
prediccion.nnet2 <- predict(modelo.nnet2,ttesting)
prediccion.nnet2
indices1 <- indices.precision(ttesting$Balance ,prediccion.nnet2[,1],numero.predictoras)
indices1
modelo.nnet3 <- neuralnet(Balance ~., data = taprendizaje, hidden = c( 4, 3,2), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
prediccion.nnet3 <- predict(modelo.nnet3,ttesting)
indices2 <- indices.precision(ttesting$Balance ,prediccion.nnet3[,1],numero.predictoras)
indices3
modelo.nnet3 <- neuralnet(Balance ~., data = taprendizaje, hidden = c( 4, 3,2), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
prediccion.nnet3 <- predict(modelo.nnet3,ttesting)
library(neuralnet)
library(traineR)
# 2 capas
modelo.nnet2 <- neuralnet(Balance ~., data = taprendizaje, hidden = c( 4, 3), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
prediccion.nnet2 <- predict(modelo.nnet2,ttesting)
indices1 <- indices.precision(ttesting$Balance ,prediccion.nnet2[,1],numero.predictoras)
indices1
modelo.nnet3 <- neuralnet(Balance ~., data = taprendizaje, hidden = c( 4, 3,2), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
prediccion.nnet3 <- predict(modelo.nnet3,ttesting)
indices3 <- indices.precision(ttesting$Balance ,prediccion.nnet3[,1],numero.predictoras)
indices3
modelo.nnet4 <- neuralnet(Balance ~., data = taprendizaje, hidden = c( 9,6, 3,1), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
prediccion.nnet4 <- predict(modelo.nnet4,ttesting)
indices4 <- indices.precision(ttesting$Balance ,prediccion.nnet4[,1],numero.predictoras)
indices4
modelo.nnet3 <- neuralnet(Balance ~., data = taprendizaje, hidden = c( 4, 3), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
prediccion.nnet3 <- predict(modelo.nnet3,ttesting)
modelo.nnet3 <- neuralnet(Balance ~., data = taprendizaje, hidden = c( 4, 3), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
prediccion.nnet3 <- predict(modelo.nnet3,ttesting)
indices3 <- indices.precision(ttesting$Balance ,prediccion.nnet3[,1],numero.predictoras)
indices3
modelo.nnet4 <- neuralnet(Balance ~., data = taprendizaje, hidden = c( 9,1), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
prediccion.nnet4 <- predict(modelo.nnet4,ttesting)
modelo.nnet4 <- neuralnet(Balance ~., data = taprendizaje, hidden = c( 9,1), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
prediccion.nnet4 <- predict(modelo.nnet4,ttesting)
modelo.nnet4 <- neuralnet(Balance ~., data = taprendizaje, hidden = c( 9,1), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
prediccion.nnet4 <- predict(modelo.nnet4,ttesting)
indices4 <- indices.precision(ttesting$Balance ,prediccion.nnet4[,1],numero.predictoras)
indices4
modelo.nnet5 <- neuralnet(Balance ~., data = taprendizaje, hidden = c( 9,6, 3), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
prediccion.nnet5 <- predict(modelo.nnet5,ttesting)
indices5 <- indices.precision(ttesting$Balance ,prediccion.nnet5[,1],numero.predictoras)
indices5
modelo.nnet6 <- neuralnet(Balance ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
prediccion.nnet6 <- predict(modelo.nnet6,ttesting)
indices6 <- indices.precision(ttesting$Balance ,prediccion.nnet6[,1],numero.predictoras)
indices6
library(fastDummies)
datos <- read.table("datos/DeudaCredito.csv", dec = ".", sep = ",", header = T, stringsAsFactors = T )[,-1]
datos <- dummy_cols(datos, select_columns = c("Genero","Estudiante","Casado","Etnicidad"),remove_selected_columns = T)
str(datos)
numero.predictoras <- dim(datos)[2] - 1
filas <- dim(datos)[1]
muestra <- sample(1:filas, floor(filas*0.20))
ttesting <- datos[muestra,]
taprendizaje <- datos[-muestra,]
library(traineR)
modelo.linear <- train.svm(Balance~., data = taprendizaje, kernel = "linear")
prediccion.linear <- predict(modelo.linear, ttesting)
linear <- indices.precision(ttesting$Balance ,prediccion.linear$prediction,numero.predictoras)
linear
modelo.polynomial <- train.svm(Balance~., data = taprendizaje, kernel = "polynomial")
prediccion.polynomial <- predict(modelo.polynomial, ttesting)
polynomial <- indices.precision(ttesting$Balance ,prediccion.polynomial$prediction,numero.predictoras)
polynomial
modelo.radial <- train.svm(Balance~., data = taprendizaje, kernel = "radial")
prediccion.radial <- predict(modelo.radial, ttesting)
radial <- indices.precision(ttesting$Balance ,prediccion.radial$prediction,numero.predictoras)
radial
modelo.sigmoid <- train.svm(Balance~., data = taprendizaje, kernel = "sigmoid")
prediccion.sigmoid <- predict(modelo.sigmoid, ttesting)
sigmoid <- indices.precision(ttesting$Balance ,prediccion.sigmoid$prediction,numero.predictoras)
sigmoid
errores <- rbind(as.data.frame(linear),as.data.frame(polynomial),as.data.frame(radial),as.data.frame(sigmoid),as.data.frame(indices2), as.data.frame(indices6))
rownames(errores) <- c("SVM.linear"," SVM.polynomial","SVM.radial","SVM.sigmoid", "NeuralNet 2 capas", "NeuralNet 3 capas")
errores
errores %>%
filter(raiz.error.cuadratico == min(errores$raiz.error.cuadratico))
library(dplyr)
errores %>%
filter(raiz.error.cuadratico == min(errores$raiz.error.cuadratico))
datos <- read.table("datos/AsientosNinno.csv", dec = ".", sep = ";",header = T, stringsAsFactors = T)[,-1]
datos <- read.table("~/datos/AsientosNinno.csv", dec = ".", sep = ";",header = T, stringsAsFactors = T)[,-1]
datos <- read.table(":/datos/AsientosNinno.csv", dec = ".", sep = ";",header = T, stringsAsFactors = T)[,-1]
datos <- read.table("../datos/AsientosNinno.csv", dec = ".", sep = ";",header = T, stringsAsFactors = T)[,-1]
datos <- read.table("../datos/AsientosNinno.csv", dec = ".", sep = ";",header = T, stringsAsFactors = T)[,-1]
datos$CalidadEstant <- factor(datos$CalidadEstant,levels = c("Malo","Medio","Bueno"), ordered=TRUE)
str(datos)
numero.predictoras <- dim(datos)[2] - 1
filas <- dim(datos)[1]
muestra <- sample(1:filas, floor(filas*0.20))
ttesting <- datos[muestra,]
taprendizaje <- datos[-muestra,]
#elimino las variables
taprendizaje <- taprendizaje[,-c(4,13)]
ttesting <- ttesting[,-c(4,13)]
library(traineR)
modelo.linear <- train.svm(Ventas~., data = taprendizaje, kernel = "linear")
prediccion.linear <- predict(modelo.linear, ttesting)
linear <- indices.precision(ttesting$Ventas ,prediccion.linear$prediction,numero.predictoras)
linear
modelo.polynomial <- train.svm(Ventas~., data = taprendizaje, kernel = "polynomial")
prediccion.polynomial <- predict(modelo.polynomial, ttesting)
polynomial <- indices.precision(ttesting$Ventas ,prediccion.polynomial$prediction,numero.predictoras)
polynomial
modelo.radial <- train.svm(Ventas~., data = taprendizaje, kernel = "radial")
prediccion.radial <- predict(modelo.radial, ttesting)
radial <- indices.precision(ttesting$Ventas ,prediccion.radial$prediction,numero.predictoras)
radial
modelo.sigmoid <- train.svm(Ventas~., data = taprendizaje, kernel = "sigmoid")
prediccion.sigmoid <- predict(modelo.sigmoid, ttesting)
sigmoid <- indices.precision(ttesting$Ventas ,prediccion.sigmoid$prediction,numero.predictoras)
sigmoid
modelo.red <- neuralnet( data = datos, hidden = c(6, 4, 3), linear.output = TRUE, threshold = 0.05, stepmax = 1e+05)
NNET <- indices.precision(ttesting$Ventas ,prediccion.nnet[,1],numero.predictoras)
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
datos <- dummy_cols(datos, select_columns = c("CalidadEstant"),remove_selected_columns = T)
numero.predictoras <- dim(datos)[2] - 1
filas <- dim(datos)[1]
muestra <- sample(1:filas, floor(filas*0.20))
ttesting <- datos[muestra,]
taprendizaje <- datos[-muestra,]
#elimino las variables
taprendizaje <- taprendizaje[,-c(4,13)]
ttesting <- ttesting[,-c(4,13)]
datos <- read.table("../datos/AsientosNinno.csv", dec = ".", sep = ";",header = T, stringsAsFactors = T)[,-1]
datos$CalidadEstant <- factor(datos$CalidadEstant,levels = c("Malo","Medio","Bueno"), ordered=TRUE)
str(datos)
datos <- dummy_cols(datos, select_columns = c("CalidadEstant"),remove_selected_columns = T)
numero.predictoras <- dim(datos)[2] - 1
filas <- dim(datos)[1]
muestra <- sample(1:filas, floor(filas*0.20))
ttesting <- datos[muestra,]
taprendizaje <- datos[-muestra,]
#elimino las variables
taprendizaje <- taprendizaje[,-c(4,13)]
ttesting <- ttesting[,-c(4,13)]
modelo.radial <- train.svm(Ventas~., data = taprendizaje, kernel = "radial")
prediccion.radial <- predict(modelo.radial, ttesting)
radial <- indices.precision(ttesting$Ventas ,prediccion.radial$prediction,numero.predictoras)
radial
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
prediccion.nnet <- predict(modelo.nnet,ttesting)
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
prediccion.nnet <- predict(modelo.nnet,ttesting)
library(traineR)
modelo.linear <- train.svm(Ventas~., data = taprendizaje, kernel = "linear")
prediccion.linear <- predict(modelo.linear, ttesting)
linear <- indices.precision(ttesting$Ventas ,prediccion.linear$prediction,numero.predictoras)
linear
modelo.polynomial <- train.svm(Ventas~., data = taprendizaje, kernel = "polynomial")
prediccion.polynomial <- predict(modelo.polynomial, ttesting)
polynomial <- indices.precision(ttesting$Ventas ,prediccion.polynomial$prediction,numero.predictoras)
polynomial
modelo.radial <- train.svm(Ventas~., data = taprendizaje, kernel = "radial")
prediccion.radial <- predict(modelo.radial, ttesting)
radial <- indices.precision(ttesting$Ventas ,prediccion.radial$prediction,numero.predictoras)
radial
modelo.sigmoid <- train.svm(Ventas~., data = taprendizaje, kernel = "sigmoid")
prediccion.sigmoid <- predict(modelo.sigmoid, ttesting)
sigmoid <- indices.precision(ttesting$Ventas ,prediccion.sigmoid$prediction,numero.predictoras)
sigmoid
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6, 4), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
prediccion.nnet <- predict(modelo.nnet,ttesting)
modelo.nnet <- neuralnet(Ventas ~., data = taprendizaje, hidden = c( 8,6), linear.output = TRUE, threshold = 0.05, stepmax = 50000)
prediccion.nnet <- predict(modelo.nnet,ttesting)
errores <- rbind(as.data.frame(linear),as.data.frame(polynomial),as.data.frame(radial),as.data.frame(sigmoid),as.data.frame(NNET))
$$g(x) = \dfrac{1}{1+e^{-x}}$$
!["grafoDirigido.PNG"]()
x1 <- c(1,1,1,1)
x2 <- c(0,0,1,1)
x3 <- c(0,1,0,1)
z <- c(1,1,1,0)
tabla <- data.frame(x1,x2,x3,z)
#función de activación
tangenteHiperb <- function(x){
y <- 2/(1+exp(-2*x)) - 1
return(y)
}
I <- function(t){
if(t >= 0){
return(1)
}else {
return(0)
}
}
#Pesos
v <- seq(-1,1,0.1)
u <- seq(0,1,0.1)
error <- data.frame()
for (omega in u) {
for (w1 in v) {
for (w2 in v) {
for (w3 in v) {
s <- 0
for (i in 1:4) {
s <- s + (I(tangenteHiperb(w1*tabla[i,1] - omega + w2*tabla[i,2] - omega + w3*tabla[i,3] - omega)) - tabla[i,4])^2
}
error <- rbind(error,data.frame(w1,w2,w3,omega,s/4))
}
}
}
}
names(error)[5] <- c("Error")
error%>%filter(Error == 0)
