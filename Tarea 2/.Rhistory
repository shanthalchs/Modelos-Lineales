dim(datos)
datos[,c(1:3)]
str(datos)
cor(datos[,c(2,8)])
num.datos <- Filter(is.numeric,datos)
lapply(num.datos, sum)
summary(datos)
funcionRandom <- function(){
n <- sample(1:500, 200)
n <- length(n[n>50 & n < 450])
cat("Hay", n, "números entre 50 y 450")
}
funcionRandom()
costoTel <- function(t){
costo <- 0
if(t<1){
costo = 0.4
} else{
costo = 0.4 + (t-1)/4
}
cat("El costo de la llamada fue de", costo, "dólares")
}
costoTel(0.5)
costoTel(5)
A <- matrix(c(9,30,4,1,30,-1,4,12,-2), nrow = 3, byrow = T)
traza <- function(m){
if(nrow(m) != ncol(m)){
print("La matriz no es cuadrada")
} else{
cat("La traza de la matriz es", sum(diag(m)))
}
}
traza(A)
cuadrado <- function(x){
i <- 1
while(i^2 < x){
i <- i+1
}
return(i-1)
}
cuadrado(500)
alumnos <- data.frame(edad = c(8,8,9,9,9,8,9,9,10,8),
annoNac = c(2011,2011,2011,2011,2011,2011,2011,2011,2010,2011),
numTelef =  as.vector(sample(80000000:89999999,10)))
nombres <- c("Maria","Jose","Ana", "Paula", "Cristina", "Guillermo", "Carlos", "Jason", "Jocelyn", "Luis" )
rownames(alumnos) <- nombres
alumnos
esDivisible <- function(x){
divisibles <- 0
dimensiones <-dim(x)
for(i in 1:dimensiones[2]){
for(j in 1:dimensiones[1]){
if(typeof(x[,i]) == "integer" | typeof(x[,i]) == "numeric"| typeof(x[,i]) == "double"){
if(x[j,i]%%3 == 0){
divisibles <- divisibles + 1
}
}
}
}
return(divisibles)
}
esDivisible(alumnos)
columnas <- function(data,c1,c2){
lista <- list(names(data[,c(c1,c2)]),
cov(data[,c(c1,c2)]),
cor(data[c(c1,c2)]))
return(lista)
}
columnas(alumnos,1,2)
recursiva <- function(n){
if(n==0){
return(5)
} else if(n==1){
return(-5)
} else if(n==2){
return(2)
} else {
return(recursiva(n-1) - 11*recursiva(n-2)+2*recursiva(n-3))
}
}
recursiva(2)
recursiva(3)
collatz <- function(x){
i <- 0
while(x>1){
i <- i+1
if(x%%2 == 0){
x <- x/2
} else{
x <- x*3 + 1
}
}
cat("Las repeticiones necesarias fueron", i)
}
collatz(16)
collatz(12)
collatz(31)
collatz <- function(x){
i <- 0
while(x>1){
i <- i+1
if(x%%2 == 0){
x <- x/2
} else{
x <- x*3 + 1
}
}
cat("Las repeticiones necesarias fueron", i, "\n")
}
collatz(16)
collatz(12)
collatz(31)
es.factor <- function(n,f){
if(n%%f == 0){
return(f)
} else {
return(0)
}
}
suma.factores <- function(n){
aux <- function(n,m){
if(n==1){
return(1)
} else {
return(es.factor(m,n) + aux(n-1,m))
}
}
return(aux(n-1,n))
}
suma.factores(9)
clasificacion <- function(n){
total <- suma.factores(n)
if(total==n){
cat("El número",n,"es perfecto")
} else if(total > n){
cat("El número",n,"es abundante")
} else{
cat("El número",n,"es defectivo")
}
}
clasificacion(10)
clasificacion(6)
clasificacion(12)
clasificacion <- function(n){
total <- suma.factores(n)
if(total==n){
cat("El número",n,"es perfecto", "\n")
} else if(total > n){
cat("El número",n,"es abundante", "\n")
} else{
cat("El número",n,"es defectivo","\n")
}
}
clasificacion(10)
clasificacion(6)
clasificacion(12)
A = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12),nrow=4,"byrow"="true")
A
A[1,1:3] #Extraigo de la 1era fila las cols 1,2 y 3
A[1:4,2] # Extraigo de todas las filas la columna 2
A[3,3] # Extraigo de la fila 3 la col 3
A[11] #extraigo el indice 11avo de la matriz
A[20] #extraigo la entrada 20 de la matriz pero esta no existe y me devuelve NA
A[5,4] # extraigo la fila 5 col 4 pero no existe pues solo hay 4 filas, me devuelve NA
summary(Datos)
str(Datos)
Datos <- read.table('datos/potabilidad_V2.csv',
header=TRUE, sep=',',dec='.',row.names=1, stringsAsFactors = T)
dim(Datos)
Datos[,c(1,2)]
summary(Datos)
str(Datos)
lapply(Datos, mean)
lapply(Datos, sd)
Datos <- read.table('datos/potabilidad_V2.csv',
header=TRUE, sep=',',dec='.',row.names=1)
dim(Datos)
Datos[,c(1,2)]
lapply(Datos, mean)
lapply(Datos, sd)
Datos <- read.table("datos/potabilidad_V2.csv",
header=TRUE, sep=";",dec=",",row.names=1)
dim(Datos)
Datos[,c(1,2)]
summary(datos)
str(datos)
cor(datos[,c(2,8)])
num.datos <- Filter(is.numeric,datos)
lapply(num.datos, sum)
summary(datos)
summary(datos)[1]
summary(datos)[1,1]
summary(datos)[1,1]
summary(datos)
summary(datos)[1,:]
summary(datos)[1,]
summary(datos)
summary(datos)[c(1,3,4,6),]
summary(datos)
summary(datos)[c(1,3,4,6),c(1:8)]
summary(datos)[c(1,3,4,6),c(1:9)]
summary(datos)[c(1,3,4,6),c(1:8)]
summary(datos)[c(1,3,4,6),c(1:7)]
summary(datos)[c(1,3,4,6),c(1,2,3,4,6,7,8)]
summary(datos)[c(1,3,4,6),c(1,2,3,4,6,7,8,9)]
summary(datos)[,c(5,10)]
summary(datos)[,c(5,10)]
summary(datos)[c(1,3,4,6),c(1,2,3,4,6,7,8,9)]
funcionRandom <- function(){
n <- sample(1:500, 200)
n <- length(n[n>50 & n < 450])
cat("Hay", n, "números entre 50 y 450")
}
funcionRandom()
costoTel <- function(t){
costo <- 0
if(t<1){
costo = 0.4
} else{
costo = 0.4 + (t-1)/4
}
cat("El costo de la llamada fue de", costo, "dólares")
}
costoTel(0.5)
costoTel(5)
install.packages("predictoR", dependencies = TRUE)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
datos <- read.table("Datos/Bicicletas.csv")
setwd("~/Github/Modelos-Lineales/Tarea 2")
datos <- read.table("Datos/Bicicletas.csv")
datos <- read.table("Datos/Uso_Bicicletas.csv")
datos <- read.table("Datos/Uso_Bicicletas.csv",sep = ",", dec = ".", header = T)
datos <- read.table("Datos/Uso_Bicicletas.csv",sep = ",", dec = ".", header = T)
View(datos)
datos
datos <- read.table("Datos/Uso_Bicicletas.csv",sep = ",", dec = ".", header = T)
datos <- read.table("Datos/Uso_Bicicletas.csv",sep = ",", dec = ".", header = T)[,-1]
modelo.lm <- lm(TotalUsuarios~., data = datos)
modelo.lm
summary(datos)
library(corrplot)
matriz.correlacion<-cor(datos)
corrplot(matriz.correlacion)
```{r, fig.height=6, fig.width=6}
library(corrplot)
matriz.correlacion<-cor(datos)
corrplot(matriz.correlacion)
modelo.lm
datos <- read.table("Datos/Uso_Bicicletas.csv",sep = ",", dec = ".", header = T)[,-1]
numero.predictoras <- dim(datos)[2] - 1
numero.filas <- dim(datos)[1]
muestra <- sample(1:numero.filas,numero.filas*0.2)
datos.aprendizaje <- datos[muestra, ]
datos.prueba <- datos[-muestra, ]
modelo.lm <- lm(TotalUsuarios~., data = datos.aprendizaje)
modelo.lm
datos <- read.table("Datos/Uso_Bicicletas.csv",sep = ",", dec = ".", header = T)[,-1]
numero.predictoras <- dim(datos)[2] - 1
numero.filas <- dim(datos)[1]
muestra <- sample(1:numero.filas,numero.filas*0.2)
datos.aprendizaje <- datos[-muestra, ]
datos.prueba <- datos[muestra, ]
summary(datos)
summary(datos)[,11]
summary(datos)[11]
summary(datos)
library(corrplot)
matriz.correlacion<-cor(datos)
corrplot(matriz.correlacion)
modelo.lm <- lm(TotalUsuarios~., data = datos.aprendizaje)
modelo.lm
View(datos.aprendizaje)
modelo.lm <- lm(TotalUsuarios~., data = datos.aprendizaje[,-c(11,12)])
modelo.lm
# Residual Sum of Square (RSS)
RSS <- function(Pred,Real) {
ss <- sum((Real-Pred)^2)
return(ss)
}
RSE<-function(Pred,Real,NumPred) {
N<-length(Real)-NumPred-1  # <- length(Real)-(NumPred+1)
ss<-sqrt((1/N)*RSS(Pred,Real))
return(ss)
}
MSE <- function(Pred,Real) {
N<-length(Real)
ss<-(1/N)*RSS(Pred,Real)
return(ss)
}
error.relativo <- function(Pred,Real) {
ss<-sum(abs(Real-Pred))/sum(abs(Real))
return(ss)
}
# Funciones para desplegar precisión
indices.precision <- function(real, prediccion,cantidad.variables.predictoras) {
return(list(error.cuadratico = MSE(prediccion,real),
raiz.error.cuadratico = RSE(prediccion,real,cantidad.variables.predictoras),
error.relativo = error.relativo(prediccion,real),
correlacion = as.numeric(cor(prediccion,real))))
}
# Gráfico de dispersión entre el valor real de la variable a predecir y la predicción del modelo.
plot.real.prediccion <- function(real, prediccion, modelo = "") {
g <- ggplot(data = data.frame(Real = real, Prediccion = as.numeric(prediccion)), mapping = aes(x = Real, y = Prediccion)) +
geom_point(size = 1, col = "dodgerblue3") +
labs(title = paste0("Real vs Predicción", ifelse(modelo == "", "", paste(", con", modelo))),
x = "Real",
y = "Predicción")
return(g)
}
# Hace la Predicción
prediccion <- predict(modelo.lm, datos.prueba)
# Medición de precisión
pre.lm <- indices.precision(datos.prueba$TotalUsuarios, prediccion,numero.predictoras)
pre.lm
library(glmnet)
install.packages("glmnet")
install.packages("glmnet")
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(glmnet)
library(glmnet)
lasso.mod <- glmnet(x,y,alpha =1)
library(glmnet)
x<-model.matrix(TotalUsuarios~.,datos)[,-1]
lasso.mod <- glmnet(x,y,alpha =1)
y <- datos$TotalUsuarios
x<-model.matrix(TotalUsuarios~.,datos)[,-1]
lasso.mod <- glmnet(x,y,alpha =1)
coef(lasso.mod)
lasso.mod$lambda
lasso.mod
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
lm2 <- function(tabla){
filas <- dim(tabla)[1]
intercept <- integer(filas) + 1
y <- as.matrix(tabla$chd)
tabla$chd <- NULL
X <- as.matrix(tabla)
X <- cbind(intercept, X)
X.t <- t(X)
B <- (solve(X.t %*% X) %*% X.t) %*% y
return(B)
}
library(dummies)
datos <-  read.table("Datos/SAheart.csv", sep = ";", dec = ".", header = T)
datos$chd <- ifelse(datos$chd == "Si", 1,0)
datosC <-  dummy.data.frame(datos, sep = ";")
azar <- sample(1:nrow(datos), nrow(datos)*0.8)
aprendizaje <- datosC[azar,]
prueba <- datosC[-azar,]
lm2 <- function(tabla){
filas <- dim(tabla)[1]
intercept <- integer(filas) + 1
y <- as.matrix(tabla$chd)
tabla$chd <- NULL
X <- as.matrix(tabla)
X <- cbind(intercept, X)
X.t <- t(X)
B <- (solve(X.t %*% X) %*% X.t) %*% y
return(B)
}
predict2 <- function(modelo, ttesting) {
return(as.matrix(ttesting) %*% modelo)
}
library(dummies)
datos <-  read.table("Datos/SAheart.csv", sep = ";", dec = ".", header = T)
datos$chd <- ifelse(datos$chd == "Si", 1,0)
datosC <-  dummy.data.frame(datos, sep = ";")
azar <- sample(1:nrow(datos), nrow(datos)*0.8)
aprendizaje <- datosC[azar,]
prueba <- datosC[-azar,]
modelo <- lm(formula = chd~., data = datosC)
modelo1 <- lm2(aprendizaje)
modelo1 <- lm2(aprendizaje)
datos <-  read.table("Datos/SAheart.csv", sep = ";", dec = ".", header = T)
datos$chd <- ifelse(datos$chd == "Si", 1,0)
datosC <-  dummy.data.frame(datos, sep = ";")
muestra <- sample(1:nrow(datos), nrow(datos)*0.8)
aprendizaje <- datosC[muestra,]
prueba <- datosC[-muestra,]
modelo1 <- lm2(aprendizaje)
lm2 <- function(tabla.aprendizaje) {
filas <- dim(tabla.aprendizaje)[1]
ones <- integer(filas) + 1
y <- as.matrix(tabla.aprendizaje$chd)
tabla.aprendizaje$chd <- NULL
X <- as.matrix(tabla.aprendizaje)
X <- cbind(ones, X)
X.t <- t(X)
B <- (solve(X.t %*% X) %*% X.t) %*% y
return(B)
}
lm2 <- function(tabla.aprendizaje) {
filas <- dim(tabla.aprendizaje)[1]
ones <- integer(filas) + 1
y <- as.matrix(tabla.aprendizaje$chd)
tabla.aprendizaje$chd <- NULL
X <- as.matrix(tabla.aprendizaje)
X <- cbind(ones, X)
X.t <- t(X)
B <- (solve(X.t %*% X) %*% X.t) %*% y
return(B)
}
predict2 <- function(modelo, ttesting) {
return(as.matrix(ttesting) %*% modelo)
}
library(dummies)
datos <-  read.table("Datos/SAheart.csv", sep = ";", dec = ".", header = T)
datos$chd <- ifelse(datos$chd == "Si", 1,0)
datosC <-  dummy.data.frame(datos, sep = ";")
muestra <- sample(1:nrow(datos), nrow(datos)*0.8)
aprendizaje <- datosC[muestra,]
prueba <- datosC[-muestra,]
aprendizaje$
modelo1 <- lm2(aprendizaje)
lm2 <- function(datos.training, y) {
X <- as.matrix(datos.training[-ncol(datos.training)])
X <- cbind(rep(1, length(y)), X)
return(solve(t(X) %*% X) %*% (t(X) %*% y))
}
model2 <- lm2(aprendizaje, aprendizaje$chd)
model2 <- lm2(aprendizaje, aprendizaje$chd)
model2 <- lm2(aprendizaje, aprendizaje$chd)
model2 <- lm2(aprendizaje, aprendizaje$chd)
library(dummies)
datos <-  read.table("Datos/SAheart.csv", sep = ";", dec = ".", header = T)
datos$chd <- ifelse(datos$chd == "Si", 1,0)
datosC <-  dummy.data.frame(datos, sep = ";")
muestra <- sample(1:nrow(datos), nrow(datos)*0.8)
aprendizaje <- datos[muestra,]
prueba <- datos[-muestra,]
model2 <- lm2(aprendizaje, aprendizaje$chd)
library(dummies)
datos.us.crime <- read.table('Datos/uscrime.csv',header=TRUE, sep=',',dec='.')
paged_table(datos.us.crime)
library(dummies)
datos.us.crime <- read.table('Datos/uscrime.csv',header=TRUE, sep=',',dec='.')
cantidad.variables.predictoras <- dim(datos.us.crime)[2] - 1
cantidad.filas <- dim(datos.us.crime)[1]
datos.muestra <- sample(1:cantidad.filas,cantidad.filas*0.67)
datos.entrenamiento <- datos.us.crime[datos.muestra,]
datos.prueba <- datos.us.crime[-datos.muestra,]
library(dummies)
datos.us.crime <- read.table('Datos/uscrime.csv',header=TRUE, sep=',',dec='.')
cantidad.variables.predictoras <- dim(datos.us.crime)[2] - 1
cantidad.filas <- dim(datos.us.crime)[1]
datos.muestra <- sample(1:cantidad.filas,cantidad.filas*0.67)
datos.entrenamiento <- datos.us.crime[datos.muestra,]
datos.prueba <- datos.us.crime[-datos.muestra,]
model2 <- lm2(aprendizaje, aprendizaje$chd)
model2 <- lm2(aprendizaje, aprendizaje$chd)
model2 <- lm2(aprendizaje, aprendizaje$chd)
model2 <- lm2(aprendizaje, aprendizaje$chd)
model2 <- lm2(datos.entrenamiento, datos.entrenamiento$ViolentCrimesPerPop)
model1 <- lm(ViolentCrimesPerPop~., datos.entrenamiento)
paged_table(data.frame(modelo.lm = model1$coefficients, modelo.lm2 = model2))
data.frame(modelo.lm = model1$coefficients, modelo.lm2 = model2)
predic2 <- predict2(model2, datos.prueba)
predic1 <- predict(model1, datos.prueba)
data.frame(predict = predic1, predict2 = predic2)
time1 <- head(system.time(lm(ViolentCrimesPerPop~., datos.entrenamiento)), 3)
time2 <- head(system.time(lm2(datos.entrenamiento, datos.entrenamiento$ViolentCrimesPerPop)), 3)
paged_table(data.frame(Tiempo.lm = time1, Tiempo.lm2 = time2))
data.frame(Tiempo.lm = time1, Tiempo.lm2 = time2)
library(dummies)
datos <- read.table('Datos/uscrime.csv',header=TRUE, sep=',',dec='.')
cantidad.variables.predictoras <- dim(datos)[2] - 1
cantidad.filas <- dim(datos)[1]
datos.muestra <- sample(1:cantidad.filas,cantidad.filas*0.80)
ttraining <- datos[datos.muestra,]
ttesting <- datos[-datos.muestra,]
model2 <- lm2(ttraining, ttraining$ViolentCrimesPerPop)
model1 <- lm(ViolentCrimesPerPop~., ttraining)
data.frame(modelo.lm = model1$coefficients, modelo.lm2 = model2)
predic2 <- predict2(model2, ttesting)
predic1 <- predict(model1, ttesting)
data.frame(predict = predic1, predict2 = predic2)
time1 <- head(system.time(lm(ViolentCrimesPerPop~., ttraining)), 3)
time2 <- head(system.time(lm2(ttraining, ttraining$ViolentCrimesPerPop)), 3)
data.frame(Tiempo.lm = time1, Tiempo.lm2 = time2)
